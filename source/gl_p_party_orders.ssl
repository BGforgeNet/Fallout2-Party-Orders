#define SCRIPT_REALNAME "gl_p_party_orders"
#define msg_file "p_party_orders.msg"

procedure start;

#include "headers/rp/define.h"
#include "headers/rp/animcomd.h"
#include "headers/rp/itempid.h"

#include "headers/party_orders/zcustom.h"
#include "headers/party_orders/party_orders.h"

#include "headers/fo2tweaks/fo2tweaks.h"

#define ini_file			"mods\\party_orders.ini|"
#define ini_filename			"mods\\party_orders.ini"
#define sec_SETTINGS			(ini_file + "SETTINGS|")
#define sec_NPC				(ini_file + "NPC|")
#define sec_NPC_NAME			(ini_file + "N_NPC|")
#define sec_LOOTER			(ini_file + "LOOTER|")
#define sec_LOOTER_NAME			(ini_file + "N_LOOTER|")
#define sec_MESSAGE				(ini_file + "MESSAGE|")
#define sec_AMMO_AP				(ini_file + "AMMO_AP|")
#define sec_LOOT_FORCE	  "LOOT_FORCE"
#define sec_PICKUP_SKIP   "PICKUP_SKIP"
#define sec_burst_control (ini_file + "BURST_CONTROL|")

#define m_str(x)	message_str_game(msg, x)

#define invalid_game_mode ( \
  get_game_mode bwand \
  ( WORLDMAP bwor DIALOG bwor ESCMENU bwor SAVEGAME bwor LOADGAME \
  bwor OPTIONS bwor HELP bwor CHARSCREEN bwor PIPBOY bwor INVENTORY \
  bwor AUTOMAP bwor INTFACEUSE bwor INTFACELOOT bwor BARTER \
  bwor HEROWIN bwor DIALOGVIEW) \
)

#define REGROUP_DIS	(3)	// Minimum distance at which the NPCs must be to regroup
#define SPREAD_DIS	(5)	// Maximum distance at which the NPCs must be to spread out

// Dude valid orders (current_order)
#define co_NONE					  (0)
#define co_HOLSTER_WEAPON	(1)
#define co_HEAL_YOURSELF	(2)
#define co_HEAL_ME				(3) // ** UNIMPLEMENTED ** //
#define co_LOOT_CORPSES		(4)
#define co_REGROUP				(5)
#define co_SPREAD				  (6)
#define co_AMMO_TYPE		  (9)

// Looting System stages
#define ls_STOP					(0)
#define ls_SEEK					(1)
#define ls_MOVE					(2)
#define ls_LOOT					(3)
#define ls_PICKUP				(4)

// ** Main conditions for the looting system ** //
// * Cond1: looter x can "reach" the corpse y <--- This condition needs to be better implemented...
// * Cond2: corpse y has items to loot
// * Cond3: item z is not a container and is not active (i.e. dynamite ticking)
// * Cond4: item z is within LOOT_ITEM_DISTANCE hexes from corpse y
// * x: looter, y: corpse, z: item
#define LOOT_MAX_DISTANCE		24
#define LOOT_ITEM_DISTANCE		3
#define LOOT_COND1(x, y)			(tile_distance_objs(x, y) <= LOOT_MAX_DISTANCE)
#define LOOT_COND2(y)			(inven_count(y) != 0)
// conditions for item looting
#define LOOT_COND3(z)			(obj_item_subtype(z) != item_type_container) and (item_not_active(z))
#define LOOT_COND4(y, z)			(tile_distance_objs(y, z) <= LOOT_ITEM_DISTANCE)
// sec. cond.
#define LOOT_COND1_1(x, y)		(can_reach(x, y) or can_reach(dude_obj, y))
#define within_loot_distance(x,y) (tile_distance_objs(x, y) <= LOOT_MAX_DISTANCE)
//#define def_looting_delay		(1 * ONE_GAME_SECOND)

#define CTR_PID					(16777216)
// get npc i from list l
#define get_npc(i, l)				get_ini_setting((l) + (i))
#define get_name(i, l)			get_ini_string((l) + (i))
#define npc_ptr(x)				party_member_obj(x)

#define AMMO_TYPE_JHP	0
#define AMMO_TYPE_AP	1

#define cur_ammo_type	get_sfall_global_int(SGVAR_AMMO_TYPE)

#define get_ammopid(i)				get_ini_setting(sec_AMMO_AP + (i))

#define SGVAR_LOOTER	"p_looter"
#define SGVAR_CORPSE	"p_corpse"
#define SGVAR_GITEM0	"p_gitem0"
#define SGVAR_AMMO_TYPE	"p_ammtyp"
#define SGVAR_OPTI01 "p_opti01"
#define SGVAR_BURST "p_burst8"

#define msg_burst_float 2000
#define msg_noburst_float 2001
#define msg_burst_display 2002
#define msg_noburst_display 2003

variable begin
  down;
  holster_key; healing_key; looting_key; regroup_key; spread_key; pickup_key; switch_key; ammotype_key;
  loot_items;
  current_order;
  tWaiting_time;
  oWho; iNum_npcs; sWho_name;
  L_list;
  oLooter;
  oCorpse;
  oGItem;
  tLooting_time;
  looting_stage;
  cant_carry_all;
  dude_picking_up; dude_pickup_delay;
  ap_ammo_list;
  force_loot_list;
  pickup_skip_list;
  msg;
  burst_key;
  burst_mode;
end

// Main Order procedures
procedure keypress_hook;
procedure check_party_orders;
procedure put_away_weapon(variable oC);
procedure npc_heal_yourself(variable oC);
procedure loot_nearby_corpses(variable oC);
procedure loot_nearby_containers(variable oC);
procedure npc_regroup(variable oC);
procedure npc_spread(variable oC);
procedure npc_switch_ammo(variable oC, variable ammo_type);
procedure npc_use_best_weapon(variable oC);
procedure can_reach(variable source, variable target);
// aux procedures
procedure find_next_corpse;
procedure cancel_looting;
procedure get_ground_item_near_critter(variable oL, variable oC);	// ** TEST ** //
// test old procedures
procedure loot_n_drop(variable oL, variable oC);

//burst
procedure gamemode_hook_handler;
procedure toggle_burst;
procedure set_burst;

procedure set_burst begin
  variable who;
  variable burst_disable;
  burst_mode := get_sfall_global_int(SGVAR_BURST);

    if burst_mode == 1 then begin
      burst_disable := 0;
    end else begin
      burst_disable := 1;
    end

    foreach who in party_member_list_critters begin
      if (who != dude_obj) then begin
        set_critter_burst_disable(who, burst_disable);
        ndebug("set burst mode to " + burst_mode + " for " + obj_name(who));
      end
    end
end

procedure toggle_burst begin
  variable msg_float, msg_display;
  burst_mode := get_sfall_global_int(SGVAR_BURST);
  ndebug("old burst mode is " + burst_mode);
  if burst_mode == 0 then begin
    msg_float := m_str(msg_burst_float);
    msg_display := m_str(msg_burst_display);
    burst_mode := 1;
  end else begin
    msg_float := m_str(msg_noburst_float);
    msg_display := m_str(msg_noburst_display);
    burst_mode := 0;
  end
  float_msg(dude_obj, msg_float, FLOAT_MSG_BLUE);
  display_msg(msg_display);
  set_sfall_global(SGVAR_BURST, burst_mode);
  call set_burst;
  ndebug("new burst mode is " + burst_mode);
end

procedure gamemode_hook_handler begin
  if combat_is_initialized then begin
    call set_burst;
  end
end

procedure temp_array_from_ini(variable iniSec) begin
  variable i := 0;
  variable ar;
  ar := temp_array(200, 4);
  ndebug("create temp array!");
  while (get_ini_setting(iniSec + i) != -1) do begin
    ar[i] := get_ini_setting(iniSec + i);
    i += 1;
  end
  resize_array(ar, i);
  return ar;
end

procedure can_reach(variable source, variable target) begin
  variable direction, tile_near, objects, o;

  if tile_distance_objs(source, target) > LOOT_MAX_DISTANCE then begin
    ndebug(obj_name(target) + " is too far");
    return false;
  end

  //clear path
  if (tile_num(source) == tile_num(target)
  or len_array(path_find_to(source, tile_num(target), BLOCKING_TYPE_BLOCK)) != 0)
  then return tile_num(target);

  //adjacent tiles
  foreach direction in [0,1,2,3,4,5] begin
    tile_near := tile_num_in_direction(tile_num(target), direction, 1);
    if len_array(path_find_to(source, tile_near, BLOCKING_TYPE_BLOCK)) != 0 then return tile_near;
  end

  //no path found
  ndebug(obj_name(target) + " is blocked");
  return false;
end

procedure get_ini_section_int(variable file, variable section) begin
  variable k, v, ar := get_ini_section(file, section);
  foreach k: v in ar begin
    ar[k] := atoi(v);
  end
  return ar;
end

procedure start begin
variable begin
  temp;
end
  if game_loaded then begin
    set_global_script_repeat(30);
    holster_key := parse_hotkey(get_ini_string(sec_SETTINGS + "HolsterOrderKey"));
    healing_key := parse_hotkey(get_ini_string(sec_SETTINGS + "HealingOrderKey"));
    looting_key := parse_hotkey(get_ini_string(sec_SETTINGS + "LootingOrderKey"));
    regroup_key := parse_hotkey(get_ini_string(sec_SETTINGS + "RegroupOrderKey"));
    spread_key :=  parse_hotkey(get_ini_string(sec_SETTINGS + "SpreadOrderKey"));
    pickup_key := parse_hotkey(get_ini_string(sec_SETTINGS + "PickUpKey"));
    switch_key := parse_hotkey(get_ini_string(sec_SETTINGS + "SwitchKey"));
    ammotype_key := parse_hotkey(get_ini_string(sec_SETTINGS + "AmmoTypeOrderKey"));
    loot_items := parse_hotkey(get_ini_string(sec_SETTINGS + "PLootNearbyItems"));
    force_loot_list := get_ini_section_int(ini_filename, sec_LOOT_FORCE);
    fix_array(force_loot_list);
    pickup_skip_list := get_ini_section_int(ini_filename, sec_PICKUP_SKIP);
    fix_array(pickup_skip_list);

    burst_key := parse_hotkey(get_ini_string(sec_burst_control + "burst_key"));
    register_hook_proc(HOOK_GAMEMODECHANGE, gamemode_hook_handler);
    burst_mode := get_sfall_global_int(SGVAR_BURST);

    #define _check_key(key, default)	if (key < 0) then key := default
    _check_key(holster_key, DIK_H);
    _check_key(healing_key, DIK_F);
    _check_key(looting_key, DIK_G);
    _check_key(regroup_key, DIK_R);
    _check_key(spread_key, DIK_X);
    _check_key(pickup_key, DIK_T);
    _check_key(switch_key, DIK_0);
    _check_key(ammotype_key, DIK_B + DIK_LCONTROL * 0x10000);
    #undef _check_key
    if((loot_items < 0)or(loot_items > 1)) then loot_items := 1;
    tWaiting_time := game_time;
    iNum_npcs := 0;
    oWho := 0;
    oLooter := 0;
    tLooting_time := game_time;
    looting_stage := ls_STOP;
    cant_carry_all := 0;
    set_sfall_global(SGVAR_LOOTER, 0);
    set_sfall_global(SGVAR_CORPSE, 0);
    set_sfall_global(SGVAR_GITEM0, 0);

    register_hook_proc(HOOK_KEYPRESS, keypress_hook);
    msg := add_extra_msg_file(msg_file);
    ndebug("initialized, current burst mode: " + burst_mode);
  end

  if not combat_is_initialized then begin
    // NPC Looter system here //
    if(oLooter)then begin
      if((looting_stage == ls_STOP) and (tLooting_time <= game_time))then begin // Looting done
        if not_party_member(oLooter) then party_add(oLooter);
        if oLooter == dude_obj then
          temp := FLOAT_MSG_BLUE;
        else
          temp := FLOAT_MSG_YELLOW;
        if(cant_carry_all == 1)then
          float_msg(oLooter, m_str((10 + co_LOOT_CORPSES) * 100 + 15), temp);
        else if(cant_carry_all == 2)then
          float_msg(oLooter, m_str((10 + co_LOOT_CORPSES) * 100 + random(20, 24)), temp);
        oLooter := 0;
        set_sfall_global(SGVAR_LOOTER, 0);
        cant_carry_all := 0;
      end else if((looting_stage == ls_SEEK) and (tLooting_time <= game_time))then begin
        looting_stage += 1;
        tLooting_time := game_time; // + 1 * ONE_GAME_SECOND; // time to begin to run to a corpse
      end else if((looting_stage == ls_MOVE) and (tLooting_time <= game_time))then begin

        // Remove looter from party, to remove distance bounds
        if(is_party_member(oLooter))then party_remove(oLooter);
        // Anim run to corpse
        reg_anim_begin();
          reg_anim_obj_run_to_obj(oLooter, oCorpse, -1);
        reg_anim_end();

        tLooting_time := game_time; // + 2 * ONE_GAME_SECOND; // time between run checks

        if(tile_distance_objs(oLooter, oCorpse) <= 1)then begin
          looting_stage += 1;
          tLooting_time := game_time; // time to begin to loot the corpse
        end
        tLooting_time := game_time; // time to begin to look for the next corpse
      end else if((looting_stage == ls_LOOT) and (tLooting_time <= game_time))then begin

        if(inven_count(oCorpse) > 0)then begin
          // Anim pick up stuff
          reg_anim_clear(oLooter);
          reg_anim_begin();
            reg_anim_animate (oLooter, ANIM_magic_hands_ground, -1);
          reg_anim_end();
          // Inventory checks and item grabbing stuff here //
          if((loot_items) and (inven_free_amt(oLooter) < carry_amount(oCorpse)))then begin
            obj_drop_everything(oCorpse);
            cant_carry_all := 1;
          end else begin
            if (cant_carry_all == 0) then cant_carry_all := 2;
            move_obj_inven_to_obj(oCorpse, oLooter);
          end
        end

        tLooting_time := game_time; // + 1 * ONE_GAME_SECOND; // time to grab nearby items

        oGItem := get_ground_item_near_critter(oLooter, oCorpse); // checks nearby items on the ground
        looting_stage += 1;
      end else if((looting_stage == ls_PICKUP) and (tLooting_time <= game_time))then begin
        if oGItem then begin
          set_self(oLooter);
          pickup_obj(oGItem);
          looting_stage -= 1; // come back one step and check for more items to pick up
        end else begin
          oCorpse := find_next_corpse;
        end
        tLooting_time := game_time + 1 * ONE_GAME_SECOND; // time to begin to look for the next corpse
      end
    end // end Loot System
    // Dude picking stuff up -->
    if(dude_picking_up == 1) and (dude_pickup_delay <= game_time) then begin
      temp := get_ground_item_near_critter(dude_obj, dude_obj);
      if temp then begin
        set_self(dude_obj);
        pickup_obj(temp);
        dude_pickup_delay := game_time + 1 * ONE_GAME_SECOND;
      end else begin
        dude_picking_up := 0;
      end
    end
  end else begin	// if combat mode then cancel looting (if active)
    if(oLooter)then call cancel_looting;
    //cancels dude picking stuff up
    if dude_picking_up then dude_picking_up := 0;
  end
end

#define isHotkeyPressed(x)	(hotkey_pressed_now(x, key))

procedure keypress_hook begin
  variable iParty_members,
           pressed := get_sfall_arg,
           key := get_sfall_arg;

  if invalid_game_mode then return;

  if pressed and hotkey_pressed_now(burst_key, key) then begin
    call toggle_burst;
    return;
  end

   if (pressed) then begin
      iParty_members := metarule(16, 0) -1;
     if (isHotkeyPressed(holster_key)) then begin	// H: Holster weapons
       if (tWaiting_time <= game_time) then begin
         if (iParty_members) then begin
           if (not combat_is_initialized) then begin
             current_order := co_HOLSTER_WEAPON;
             call check_party_orders;
             tWaiting_time := game_time + 1 * ONE_GAME_SECOND;
           end
         end
       end
     end else if (isHotkeyPressed(healing_key)) then begin	// F: Heal yourself
       if (tWaiting_time <= game_time) then begin
         if (iParty_members) then begin
           if (not combat_is_initialized) then begin
             tWaiting_time := game_time + 3 * ONE_GAME_SECOND;
           end else begin
             tWaiting_time := game_time + 1 * ONE_GAME_SECOND;
           end
           current_order := co_HEAL_YOURSELF;
           call check_party_orders;
         end
       end
     end else if (isHotkeyPressed(looting_key)) then begin	// G: Loot bodies / items - WIP -
      if((looting_stage == ls_STOP) or (oLooter == dude_obj))then begin
        if(tWaiting_time <= game_time)then begin
          if(iParty_members)then begin
            if(not combat_is_initialized)then begin
              current_order := co_LOOT_CORPSES;
              call check_party_orders;
              tWaiting_time := game_time + 3 * ONE_GAME_SECOND;
            end
          end
        end
      end else begin
        call cancel_looting;
      end
     end else if(isHotkeyPressed(regroup_key)) then begin	// R: regroup party
       if (tWaiting_time <= game_time) then begin
         if (iParty_members) then begin
           if (not combat_is_initialized) then begin
             current_order := co_REGROUP;
             call check_party_orders;
             tWaiting_time := game_time + 3 * ONE_GAME_SECOND;
           end
         end
       end
     end else if (isHotkeyPressed(spread_key)) then begin	// X: Spread out party
       if (tWaiting_time <= game_time) then begin
         if (iParty_members) then begin
           if (not combat_is_initialized) then begin
             current_order := co_SPREAD;
             call check_party_orders;
             tWaiting_time := game_time + 2 * ONE_GAME_SECOND;
           end
         end
       end
     end else if(isHotkeyPressed(pickup_key)) then begin	// T: Pick up items or Loot bodies
      if (not combat_is_initialized) then begin
        if (oLooter == dude_obj) then begin
          call cancel_looting;
        end else if (get_sfall_global_int(SGVAR_OPTI01) == 1) then begin
          if (oLooter) then call cancel_looting;
          call loot_nearby_corpses(dude_obj);
          call loot_nearby_containers(dude_obj);
        end else begin
          dude_picking_up := 1;
          dude_pickup_delay := game_time;
        end
      end
     end else if(isHotkeyPressed(ammotype_key)) then begin	// A: Switch ammo types
       if (tWaiting_time <= game_time) then begin
         if (iParty_members) then begin
           if(not combat_is_initialized) then begin
             tWaiting_time := game_time + 3 * ONE_GAME_SECOND;
             current_order := co_AMMO_TYPE;
             if (cur_ammo_type == AMMO_TYPE_JHP) then
               set_sfall_global(SGVAR_AMMO_TYPE, AMMO_TYPE_AP);
             else
               set_sfall_global(SGVAR_AMMO_TYPE, AMMO_TYPE_JHP);
             ap_ammo_list := temp_array_from_ini(sec_AMMO_AP);
             call check_party_orders;
           end
         end
       end
     end else if (isHotkeyPressed(switch_key)) then begin	// 0: Turn dude loot bodies on / off
      if (get_sfall_global_int(SGVAR_OPTI01) == 1) then begin
        set_sfall_global(SGVAR_OPTI01, 0);
        float_msg(dude_obj, m_str(0), FLOAT_MSG_RED);
      end else begin
        set_sfall_global(SGVAR_OPTI01, 1);
        float_msg(dude_obj, m_str(1), FLOAT_MSG_GREEN);
      end
     end
   end
end


#define _setWhoName	if(get_name(i, sList_names) != "")then begin 	\
            sWho_name := get_name(i, sList_names);   	\
          end else begin                              	\
            sWho_name := obj_name(npc_ptr(npc_pid));	\
          end

procedure check_party_orders begin
variable begin
  i; sList; sList_names; npc_pid;
  oAux; iAux;
  string;
end
  string := "";
  iNum_npcs := 0;
  oWho := 0;
  sWho_name := "";
  oAux := 0;
  iAux := -1;
  i := 0;
  npc_pid := 0;
  if(current_order == co_LOOT_CORPSES)then begin
    sList := sec_LOOTER;
    sList_names := sec_LOOTER_NAME;
  end else begin
    sList := sec_NPC;
    sList_names := sec_NPC_NAME;
  end
  while(get_npc(i, sList) != -1)do begin
    npc_pid := get_npc(i, sList);
    if(npc_ptr(npc_pid))then begin
      if(current_order == co_HOLSTER_WEAPON)then begin
        if(is_armed(npc_ptr(npc_pid)))then begin
          _setWhoName
          call put_away_weapon(npc_ptr(npc_pid));
        end
      end else if(current_order == co_HEAL_YOURSELF)then begin
        // call npc_use_best_weapon(npc_ptr(npc_pid)); -- testing
        if((injured_how_much(npc_ptr(npc_pid)) >= 10) and (proto_data(npc_pid, 11) == 0))then begin
          _setWhoName
          call npc_heal_yourself(npc_ptr(npc_pid));
        end
      end else if(current_order == co_LOOT_CORPSES)then begin
        //check who has the most carry capacity
        if(inven_free_amt(npc_ptr(npc_pid)) > iAux)then begin
          iAux := inven_free_amt(npc_ptr(npc_pid));
          oAux := npc_ptr(npc_pid);
          _setWhoName
        end
      end else if(current_order == co_REGROUP)then begin
        if(tile_distance(tile_num(dude_obj), tile_num(npc_ptr(npc_pid))) > REGROUP_DIS)then begin
          _setWhoName
          call npc_regroup(npc_ptr(npc_pid));
        end
      end else if(current_order == co_SPREAD)then begin
        if(tile_distance(tile_num(dude_obj), tile_num(npc_ptr(npc_pid))) < SPREAD_DIS)then begin
          _setWhoName
          call npc_spread(npc_ptr(npc_pid));
        end
      end else if(current_order == co_AMMO_TYPE)then begin
        _setWhoName
        call npc_switch_ammo(npc_ptr(npc_pid), cur_ammo_type);
      end
    end
    i += 1;
  end
  if(current_order == co_LOOT_CORPSES)then begin
    if(oAux)then begin
      if (oLooter == dude_obj) then call cancel_looting;
      call loot_nearby_corpses(oAux);
      call loot_nearby_containers(oAux);
    end else begin
      display_msg(m_str((10 + current_order) * 100 + 99));
    end
  end

  // Dude Order floats
  if((iNum_npcs) or (cant_carry_all))then begin
    i := (10 + current_order) * 100;
    if (current_order == co_AMMO_TYPE and cur_ammo_type == AMMO_TYPE_AP) then i += 10;
    if(iNum_npcs > 1)then begin
      string := m_str(i + 1);
    end else begin
      string := m_str(i) + " " + sWho_name; // + obj_name(oWho);
      if(current_order == co_REGROUP)then string := string + "!";
      if(not cant_carry_all)then float_msg(oWho, m_str(random(100, 105)), FLOAT_MSG_YELLOW);
    end
    float_msg(dude_obj, string, FLOAT_MSG_BLUE);
  end
  current_order := co_NONE;
end

procedure put_away_weapon(variable oC) begin

  inven_unwield(oC);	// unwields without animation
  reg_anim_clear(oC);
  iNum_npcs += 1;
  oWho := oC;
end

procedure npc_use_best_weapon(variable oC) begin
variable begin
  weapon := 0;
  bestdam := 0;
  list; item;
end
  inven_unwield(oC);	// unwields without animation
  reg_anim_clear(oC);
  // search for suitable weapon
  list := inven_as_array(oC);
  foreach item in list begin
    if (item) then if (is_weapon(item)) then begin
      if (weapon == 0 or get_proto_data(obj_pid(item), PRODATA_IT_WP_DMG_MIN) > bestdam) then begin
        // try to wield
        wield_obj_critter(oC, item);
        display_msg(obj_name(oC) + " try to use " + obj_name(item) + " " + (critter_inven_obj(oC, 1) != weapon));
        if (critter_inven_obj(oC, 1) != weapon) then begin
          bestdam := get_proto_data(obj_pid(item), PRODATA_IT_WP_DMG_MIN);
          weapon := item;
        end
      end
    end
  end
  if (weapon) then begin

  end
  iNum_npcs += 1;
  oWho := oC;
end

procedure npc_heal_yourself(variable oC) begin
variable begin
  roll_result;
  roll_check;
  amount_healed;
  oHealing_item;
  oDummy;
end
  reg_anim_clear(oC);
  reg_anim_begin();

  if((injured_how_much(oC) >= 60)and(obj_is_carrying_obj_pid(oC, 144)))then begin
    oHealing_item := obj_carrying_pid_obj(oC, 144);
    rm_obj_from_inven(oC, oHealing_item);
    destroy_object(oHealing_item);
    amount_healed := 75;
    critter_heal(oC, amount_healed);
    critter_dmg(oC, 9, (DMG_normal_dam BWOR DMG_BYPASS_ARMOR BWOR DMG_NOANIMATE));
    reg_anim_animate (oC, ANIM_magic_hands_middle, -1);
    display_msg(obj_name(oC) + " " + m_str((10 + current_order) * 100 + 10));
  end else if((current_hp_per(oC) <= 75) and (not combat_is_initialized))then begin
    roll_result := random(0, 100) + medic_skill(oC);
    roll_check := random(0, 100);
    if (roll_result >= roll_check) then begin
      amount_healed := floor(20 * roll_result / 100);
      critter_heal(oC, amount_healed);
      display_msg(obj_name(oC) + " " + m_str((10 + current_order) * 100 + 12)
        + " " + amount_healed + " " + m_str((10 + current_order) * 100 + 13));
    end else begin
      display_msg(obj_name(oC) + " " + m_str((10 + current_order) * 100 + 14));
    end
    reg_anim_animate (oC, ANIM_magic_hands_middle, -1);
  end else if(obj_is_carrying_obj_pid(oC, 40))then begin
    oHealing_item := obj_carrying_pid_obj(oC, 40);
    rm_obj_from_inven(oC, oHealing_item);
    destroy_object(oHealing_item);
    amount_healed := random(10, 20);
    critter_heal(oC, amount_healed);
    reg_anim_animate (oC, ANIM_magic_hands_middle, -1);
    display_msg(obj_name(oC) + " " + m_str((10 + current_order) * 100 + 11));
  end else begin
    display_msg(obj_name(oC) + " " + m_str((10 + current_order) * 100 + 15));
  end
  reg_anim_end();

  iNum_npcs += 1;
  oWho := oC;
end

procedure run_to_tile(variable who, variable tile) begin
  ndebug("running to container");
end

procedure loot_container(variable who, variable cont, variable good_tile) begin
  ndebug("looting a container");
  reg_anim_clear(who);
  reg_anim_begin();
    reg_anim_obj_run_to_tile(who, good_tile, -1);
    reg_anim_animate(who, ANIM_magic_hands_middle, -1);
  reg_anim_end();
end

procedure loot_nearby_containers(variable looter) begin
  variable good_tile, i, items := list_as_array(LIST_GROUNDITEMS);
  ndebug("looting containers");
  foreach i in items begin
    ndebug("item is " + obj_name(i) + ", pid " + obj_pid(i) + ", is_container is " + is_container(i)
      + " is_empty is " + is_empty(i) + ", can_reach is " + can_reach(looter, i) + ", looter is " + obj_name(looter));
    good_tile := can_reach(looter, i);
    if is_container(i)
      and not is_empty(i)
      and good_tile
    then begin
      ndebug("trying to loot " + obj_name(i));
      call loot_container(looter, i, good_tile);
    end
  end
end

procedure loot_nearby_corpses(variable oC) begin
  oLooter := oC;
  L_list := list_begin(LIST_CRITTERS);
  while(L_list != 0) do begin
    oCorpse := list_next(L_list);
    if oCorpse then begin
      if is_critter_dead(oCorpse) then begin
        if is_lootable(oCorpse) or is_in_array(obj_pid(oCorpse), force_loot_list) then begin
          if can_reach(dude_obj, oCorpse) then begin
            oGItem := get_ground_item_near_critter(oC, oCorpse);
            if oGItem or LOOT_COND2(oCorpse) then begin
              set_sfall_global(SGVAR_LOOTER, oLooter);
              set_sfall_global(SGVAR_CORPSE, oCorpse);
              iNum_npcs += 1;
              oWho := oC;
              looting_stage := ls_SEEK;
              list_end(L_list);
              L_list := 0;
              return;
            end
          end
        end
      end
    end else begin
      set_sfall_global(SGVAR_CORPSE, 0);
      looting_stage := ls_STOP;
      list_end(L_list);
      L_list := 0;
      return;
    end
  end // end while
end

procedure npc_regroup(variable oC) begin
variable begin
  tile1;
end
  tile1 := tile_num_in_direction(tile_num(dude_obj), (random(0, 5)), (2 + random(0, 1)));
  reg_anim_clear(oC);
  reg_anim_begin();
    reg_anim_obj_run_to_tile(oC, tile1, -1);
  reg_anim_end();

  iNum_npcs += 1;
  oWho := oC;
end

procedure npc_spread(variable oC) begin
variable begin
  tile1; dir1;
end
  dir1 := rotation_to_tile(tile_num(dude_obj), tile_num(oC));
  tile1 := tile_num_in_direction(tile_num(oC), dir1, random(4, 6));
  reg_anim_clear(oC);
  reg_anim_begin();
    reg_anim_obj_run_to_tile(oC, tile1, -1);
  reg_anim_end();

  iNum_npcs += 1;
  oWho := oC;
end

// ----------------------------
// begin phobos2077 code:
// ammo type switch
// ----------------------------

#define is_ammo_type(pid, type)		((scan_array(ap_ammo_list, pid) != -1) == (type == AMMO_TYPE_AP))

procedure npc_switch_ammo(variable oC, variable ammo_type) begin
variable begin
  i;
  weapon := 0;
  ammopid := 0;
  list;
  item;
  bestammo;
  caliber;
  magsize;
end
  i := 1;
    while (i <= 2) do begin
    weapon := critter_inven_obj(oC, i);
    if (weapon and obj_item_subtype(weapon) == item_type_weapon) then begin
      caliber := get_proto_data(obj_pid(weapon), PRODATA_IT_WP_CALIBER);
      magsize := get_proto_data(obj_pid(weapon), PRODATA_IT_WP_MAG_SIZE);
      ammopid := get_weapon_ammo_pid(weapon);
      ndebug("found weapon with caliber " + caliber + ", ammo pid " + ammopid);
      // switch only if not already suited ammo type
      if (caliber and magsize > 0) then if not(is_ammo_type(ammopid, ammo_type)) then begin
        // try to find better ammo for this weapon
        ndebug("search best ammo...");
        bestammo := 0;
        list := inven_as_array(oC);
        foreach item in list begin
          if (item) then if (is_ammo(item)) then
            if (get_proto_data(obj_pid(item), PRODATA_IT_AM_CALIBER) == caliber and is_ammo_type(obj_pid(item), ammo_type)) then
              bestammo := item;
        end
        if (bestammo) then begin
          ndebug("found best ammo type " + obj_pid(bestammo));
          // first, unload existing ammo
          call inc_ammo_count(oC, ammopid, get_weapon_ammo_count(weapon));
          // then, load new ammo
          set_weapon_ammo_pid(weapon, obj_pid(bestammo));
          if (actual_ammo_count(oC, bestammo) < magsize) then magsize := actual_ammo_count(oC, bestammo);
          set_weapon_ammo_count(weapon, magsize);
          call inc_ammo_count(oC, obj_pid(bestammo), - magsize);
          reg_anim_clear(oC);
          animate_stand_obj(oC);
        end else
          ndebug("not found :(");
      end
    end
    i++;
    end
    iNum_npcs += 1;
  oWho := oC;
end

// -----------------------
// end phobos2077 code;
// -----------------------

procedure find_next_corpse begin
variable c;
  L_list := list_begin(LIST_CRITTERS);
  while(L_list != 0) do begin
    c := list_next(L_list);
    if(c)then begin
      if((is_critter_dead(c)))then begin
        if is_lootable(c) or is_in_array(obj_pid(c), force_loot_list) then begin
          if(LOOT_COND1_1(oLooter, c))then begin
            oGItem := get_ground_item_near_critter(oLooter, c);
            if((oGItem) or (LOOT_COND2(c)))then begin
              set_sfall_global(SGVAR_CORPSE, c);
              looting_stage := ls_SEEK;
              list_end(L_list);
              L_list := 0;
              return (c);
            end
          end
        end
      end
    end else begin
      set_sfall_global(SGVAR_CORPSE, 0);
      looting_stage := ls_STOP;
      list_end(L_list);
      L_list := 0;
      return (0);
    end
  end // end while
end
procedure cancel_looting begin
  if(oLooter)then begin
    reg_anim_clear(oLooter);
    if(not_party_member(oLooter))then party_add(oLooter);
    looting_stage := ls_STOP;
    if((iNum_npcs) and (oLooter != dude_obj))then begin
      float_msg(dude_obj, m_str((10 + co_LOOT_CORPSES) * 100 + 10) + " " + sWho_name, FLOAT_MSG_BLUE);
      float_msg(oLooter, m_str(random(100, 105)), FLOAT_MSG_YELLOW);
    end
    oLooter := 0;
    oCorpse := 0;
    set_sfall_global(SGVAR_LOOTER, 0);
    set_sfall_global(SGVAR_CORPSE, 0);
  end
  if(L_list)then begin
    list_end(L_list);
    L_list := 0;
  end
end
procedure get_ground_item_near_critter(variable oL, variable oC) begin
variable begin
  l_gitems; gitem;
  iAmmo_count; iAmmo_weight; iClip_size;  num_clips;
  iItem_weight;
end
  if(loot_items)then begin
    l_gitems := list_begin(LIST_GROUNDITEMS);
    while(l_gitems != 0) do begin
      gitem := list_next(l_gitems);
      if gitem then begin
        if (LOOT_COND3(gitem)
          and LOOT_COND4(oC, gitem)
          and not is_in_array(obj_pid(gitem), pickup_skip_list)
          )
        then begin
          if not can_reach(oL, gitem) then continue;
          iItem_weight := proto_data(obj_pid(gitem), it_weight);
          if is_weapon(gitem) then begin
            iAmmo_count := get_weapon_ammo_count(gitem);
            if(iAmmo_count > 0)then begin
              iAmmo_weight := proto_data(get_weapon_ammo_pid(gitem), it_weight);
              iClip_size := get_proto_data(get_weapon_ammo_pid(gitem), 40);
              num_clips := floor(iAmmo_count / iClip_size);
              if(iAmmo_count % iClip_size != 0) then num_clips += 1;
              iItem_weight := iItem_weight + (iAmmo_weight * num_clips);
            end
          end
          if(inven_free_amt(oL) >= iItem_weight)then begin
            list_end(l_gitems);
            l_gitems := 0;
            set_sfall_global(SGVAR_GITEM0, gitem);
            if (cant_carry_all == 0) then cant_carry_all := 2;
            return gitem;
          end else begin
            cant_carry_all := 1;
          end
        end
      end else begin
        list_end(l_gitems);
        l_gitems := 0;
        set_sfall_global(SGVAR_GITEM0, 0);
        return 0;
      end
    end // end while
  end else begin
    return 0;
  end
end
